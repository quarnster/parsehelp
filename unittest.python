import sqlitecache
import translationunitcache
from parsehelp import *


opts = ["-x", "c++",
        "-Wall",
        "-I/usr/lib/clang/3.0/include/",
        "-I/usr/lib/clang/2.1/include/",
        "-I/usr/lib/gcc/i686-apple-darwin10/4.2.1/include/",
        "-I/usr/lib/gcc/i686-apple-darwin11/4.2.1/include/",
        "-IC:/MinGW/include",
        "-I/path/to/sources/1",
        "-I/path/to/sources/2"]


sqlitecache.indexer.do_clear()
tu = translationunitcache.tuCache.get_translation_unit("unittest.cpp", ["-x", "c++"])
sqlitecache.indexer.index(tu.var.cursor)

f = open("unittest.cpp")
fulldata = f.read()
f.close()

offset = 10
line, column = get_line_and_column_from_offset(fulldata, offset)
offset2 = get_offset_from_line_and_column(fulldata, line, column)
if offset != offset2:
    raise Exception("Offset to line and column conversion failed, %d != %d" % (offset, offset2))

offset = 100
line, column = get_line_and_column_from_offset(fulldata, offset)
offset2 = get_offset_from_line_and_column(fulldata, line, column)
if offset != offset2:
    raise Exception("Offset to line and column conversion failed, %d != %d" % (offset, offset2))

offset = 200
line, column = get_line_and_column_from_offset(fulldata, offset)
offset2 = get_offset_from_line_and_column(fulldata, line, column)
if offset != offset2:
    raise Exception("Offset to line and column conversion failed, %d != %d" % (offset, offset2))

if extract_line_at_offset(fulldata, get_offset_from_line_and_column(fulldata, 12, 4)) != "std::vector<A> v;":
    raise Exception("Line extraction didn't work")

if extract_word_at_offset(fulldata, get_offset_from_line_and_column(fulldata, 84, 11)) != "tababa":
    raise Exception("Word extraction didn't work")

if extract_word_at_offset(fulldata, get_offset_from_line_and_column(fulldata, 85, 5)) != "tababa":
    raise Exception("Word extraction didn't work")

test = """/*
 testing some stuff
*/
// Will it pick this up as variables?\\
How about this?
#include <stdio.h>
// And this? /*
int itShouldPickupThis;
// */
static void Test::Something(Type& t1, vector<Type2> &t2)"""
match = get_var_type(test, "t2")
if match == None or match.group(1) != "vector<Type2> &":
    raise Exception("Couldn't extract type properly: %s" % (match.group(1) if match else "None"))

match = get_var_type(test, "t1")
if match == None or match.group(1).strip() != "Type&":
    raise Exception("Couldn't extract type properly: %s" % (match.group(1) if match else "None"))

if extract_variables(test) != [('int', 'itShouldPickupThis'), ('Type&', 't1'), ('vector<Type2> &', 't2')]:
    raise Exception("Didn't extract variables correctly")

offset = get_offset_from_line_and_column(fulldata, 10, 3)
comp = sqlitecache.sqlCache.complete(fulldata[:offset], extract_line_until_offset(fulldata, offset), "")
if comp == None or  len(comp) == 0 or comp[0][1] != "test":
    raise Exception("Completion of A didn't work")

offset = get_offset_from_line_and_column(fulldata, 14, 11)
comp = sqlitecache.sqlCache.complete(fulldata[:offset], extract_line_until_offset(fulldata, offset), "")
if comp == None or  len(comp) == 0 or comp[0][1] != "test":
    raise Exception("Completion of std::vector<A> didn't work")

offset = get_offset_from_line_and_column(fulldata, 20, 12)
comp = sqlitecache.sqlCache.complete(fulldata[:offset], extract_line_until_offset(fulldata, offset), "")
if comp == None or len(comp) == 0 or comp[0][1] != "test":
    raise Exception("Completion of typedeffed std::vector<A> didn't work")

offset = get_offset_from_line_and_column(fulldata, 31, 20)
comp = sqlitecache.sqlCache.complete(fulldata[:offset], extract_line_until_offset(fulldata, offset), "")
if comp == None or len(comp) == 0 or comp[0][1] != "test":
    raise Exception("Completion of member typedeffed std::vector<A> didn't work")

offset = get_offset_from_line_and_column(fulldata, 32, 21)
comp = sqlitecache.sqlCache.complete(fulldata[:offset], extract_line_until_offset(fulldata, offset), "")
if comp == None or len(comp) == 0 or comp[0][1] != "test":
    raise Exception("Completion of member std::vector<A> didn't work")

offset = get_offset_from_line_and_column(fulldata, 43, 28)
comp = sqlitecache.sqlCache.complete(fulldata[:offset], extract_line_until_offset(fulldata, offset), "")
if comp == None or len(comp) == 0 or comp[0][1] != "test":
    raise Exception("Completion of member std::vector<AV> didn't work")

offset = get_offset_from_line_and_column(fulldata, 44, 29)
comp = sqlitecache.sqlCache.complete(fulldata[:offset], extract_line_until_offset(fulldata, offset), "")
if comp == None or len(comp) == 0 or comp[0][1] != "test":
    raise Exception("Completion of member std::vector<std::vector<A> > didn't work")

offset = get_offset_from_line_and_column(fulldata, 55, 36)
comp = sqlitecache.sqlCache.complete(fulldata[:offset], extract_line_until_offset(fulldata, offset), "")
if comp == None or len(comp) == 0 or comp[0][1] != "test":
    raise Exception("Completion of member std::vector<std::vector<AV> > didn't work")

offset = get_offset_from_line_and_column(fulldata, 56, 37)
comp = sqlitecache.sqlCache.complete(fulldata[:offset], extract_line_until_offset(fulldata, offset), "")
if comp == None or len(comp) == 0 or comp[0][1] != "test":
    raise Exception("Completion of member std::vector<std::vector<std::vector<A> > > didn't work")

offset = get_offset_from_line_and_column(fulldata, 76, 11)
comp = sqlitecache.sqlCache.complete(fulldata[:offset], extract_line_until_offset(fulldata, offset), "")
if comp == None or len(comp) == 0 or comp[0][1] != "test":
    raise Exception("Completion of TempA<A> didn't work")

offset = get_offset_from_line_and_column(fulldata, 79, 35)
comp = sqlitecache.sqlCache.complete(fulldata[:offset], extract_line_until_offset(fulldata, offset), "")
if comp == None or len(comp) == 0 or comp[0][1] != "test":
    raise Exception("Completion of TempA<TempB<TempA<TempB<A> > > > didn't work")

offset = get_offset_from_line_and_column(fulldata, 80, 19)
comp = sqlitecache.sqlCache.complete(fulldata[:offset], extract_line_until_offset(fulldata, offset), "")
if comp == None or len(comp) == 0 or comp[0][1] != "test":
    raise Exception("Completion of TempA<TempB<TempA<TempB<A> > > > field didn't work")

offset = get_offset_from_line_and_column(fulldata, 85, 38)
comp = sqlitecache.sqlCache.complete(fulldata[:offset], extract_line_until_offset(fulldata, offset), "")
if comp == None or len(comp) == 0 or comp[0][1] != "test":
    raise Exception("Completion of Tababa typedef didn't work")

offset = get_offset_from_line_and_column(fulldata, 86, 22)
comp = sqlitecache.sqlCache.complete(fulldata[:offset], extract_line_until_offset(fulldata, offset), "")
if comp == None or len(comp) == 0 or comp[0][1] != "test":
    raise Exception("Completion of Tababa typedef field didn't work")

offset = get_offset_from_line_and_column(fulldata, 99, 51)
comp = sqlitecache.sqlCache.complete(fulldata[:offset], extract_line_until_offset(fulldata, offset), "")
if comp == None or len(comp) == 0 or comp[0][1] != "test":
    raise Exception("Completion of member Tababa typedef didn't work")

offset = get_offset_from_line_and_column(fulldata, 100, 47)
comp = sqlitecache.sqlCache.complete(fulldata[:offset], extract_line_until_offset(fulldata, offset), "")
if comp == None or len(comp) == 0 or comp[0][1] != "test":
    raise Exception("Completion of member Tababa field didn't work")

offset = get_offset_from_line_and_column(fulldata, 107, 9)
comp = sqlitecache.sqlCache.complete(fulldata[:offset], extract_line_until_offset(fulldata, offset), "c_st")
if comp == None or len(comp) == 0 or comp[0][1] != "c_str()":
    raise Exception("Completion of std::string didn't work")

offset = get_offset_from_line_and_column(fulldata, 110, 12)
comp = sqlitecache.sqlCache.complete(fulldata[:offset], extract_line_until_offset(fulldata, offset), "res")
if comp == None or len(comp) == 0 or comp[0][1] != "reset()":
    raise Exception("Completion of boost::shared_ptr didn't work")

offset = get_offset_from_line_and_column(fulldata, 111, 22)
comp = sqlitecache.sqlCache.complete(fulldata[:offset], extract_line_until_offset(fulldata, offset), "c_st")
if comp == None or len(comp) == 0 or comp[0][1] != "c_str()":
    raise Exception("Completion of boost::shared_ptr<std::vector<std::string> > didn't work")

print "all is well"

